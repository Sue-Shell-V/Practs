class Node(object):
    """树类"""
    def __init__(self,item):
        self.elem = item
        self.lchild= None
        self.rchild= None

class Tree(object):
    def __init__(self):
        self.root = None

    def add(self,item):
        node = Node(item)
        if self.root is None:
            self.root = node
            return
        queue = [self.root]

        while queue:
            cur_node = queue.pop(0)
            if cur_node.lchild is None:
                cur_node.lchild = node
                return
            else:
                queue.append(cur_node.lchild)
            if cur_node.rchild is None:
                cur_node.rchild = node
                return
            else:
                queue.append(cur_node.rchild)


    def breath_travel(self):
        """广度优先遍历"""
        if self.root is None:
            return
        queue = [self.root]
        while queue:
            cur_node = queue.pop(0)
            print(cur_node.elem)
            if cur_node.lchild is not None:
                queue.append(cur_node.lchild)
            if cur_node.rchild is not None:
                queue.append(cur_node.rchild)


    def preorder(self,node):
        """先序遍历"""
        """根->左->右"""
        if node is None:
            return
        print(node.elem)
        self.preorder(node.lchild)
        self.preorder(node.rchild)

    def in_order(self,node):
        """中序遍历"""
        """左->中->右"""
        if node is None:
            return
        self.in_order(node.lchild)
        print(node.elem)
        self.in_order(node.rchild)

    def post_order(self,node):
        """后序遍历"""
        """左->右->根"""
        if node is None:
            return
        self.post_order(node.lchild)
        self.post_order(node.rchild)
        print(node.elem)
        
        
if __name__ == "__main__":
    tree = Tree()
    tree.add(0)
    tree.add(1)
    tree.add(2)
    tree.add(3)
    tree.add(4)
    tree.add(5)
    tree.add(6)
    tree.add(7)
    tree.add(8)
    tree.add(9)
    tree.breath_travel()
    print('------------')
    tree.preorder(tree.root)
    print('------------')
    tree.in_order(tree.root)
    print('------------')
    tree.post_order(tree.root)
