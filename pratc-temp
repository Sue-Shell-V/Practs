# coding:utf-8
def bubble_sort(alist):
    for i in range(len(alist) - 1):
        for j in range(len(alist) - 1 - i):
            if alist[j]> alist[j+1]:
                alist[j] , alist[j+1] = alist[j+1],alist[j]
    return alist

def select_sort(list2):

    for i in range(len(list2)-1):
        for j in range(len(list2)-i-1):        #or for j in range(i+1,len(list2)-i-1):
            if list2[i] > list2[i+j+1]:         #  or list2[i] > list2[j]:
                list2[i], list2[i+j + 1] = list2[i+j + 1], list2[i]
    return list2


def select_sort1(list2):
#  通过下标作为标记确定最小
    for i in range(len(list2)-1):
        min_ = i
        for j in range(i+1,len(list2)):
            if list2[min_] > list2[j]:
                min_ = j
                list2[i], list2[min_] = list2[min_], list2[i]   # or  list2[i], list2[min_] = list2[min_], list2[i]
    return list2

#插入排序版本一
def insetion_sort(list3):
    length = len(list3)
    for i in range(1,length):
        for j in range(i,0,-1):
            if list3[j] < list3[j-1]:
                list3[j],list[j-1]=list3[j-1],list3[j]
    return list3
#插入排序版本二
def insetion_sort1(list3):
    length = len(list3)
    for i in range(1,length):
        for j in range(0,i):
            if list3[i] < list3[i-j-1]:             # 语句不太直观明显
                list3[i],list[i-j-1]=list3[i-j-1],list3[i]
    return list3
#插入排序版本三
def insertion_sort2(list4):
    length = len(list4)
    for i in range(1,length):
        j = i
        # j 代表每次最上层循环后左侧已经拍好的序列的数量，以便继续讲未排序的序列中取元素从进行后向前比较操作
        while j > 0:
            if list4[j] < list4[j-1]:
                list4[j],list4[j-1] = list4[j-1],list4[j]
                i -= 1
            else:
                break
                
li = [2,6,2,9,6,8,0,21,2,3,7,6,11,5,90,2,85,4,62]
print(bubble_sort([1,2,1,5,55,2,455,2,6,3,9,12,36,10,12,15,6,81,40,123,6,35,70,36]))

print(select_sort(li))
print(select_sort1(li))
print(select_sort1([2,6,2,9,6,8,0,21,2,3,7,6,11,5,90,2,85,4,62]))
print(insetion_sort(li))
print(insetion_sort1(li))
