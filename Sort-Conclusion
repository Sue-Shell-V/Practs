# coding:utf-8
def bubble_sort(alist):
    for i in range(len(alist) - 1):
        for j in range(len(alist) - 1 - i):
            if alist[j]> alist[j+1]:
                alist[j] , alist[j+1] = alist[j+1],alist[j]
    return alist

def select_sort(list2):

    for i in range(len(list2)-1):
        for j in range(len(list2)-i-1):        #or for j in range(i+1,len(list2)-i-1):
            if list2[i] > list2[i+j+1]:         #  or list2[i] > list2[j]:
                list2[i], list2[i+j + 1] = list2[i+j + 1], list2[i]
    return list2


def select_sort1(list2):
#  通过下标作为标记确定最小      
    for i in range(len(list2)-1):sele
        min_ = i
        for j in range(i+1,len(list2)):
            if list2[min_] > list2[j]:
                min_ = j                   # 每次循环都先找出该次循环中最小值的下标，最后在每次循环完后进行交换操作
        list2[i], list2[min_] = list2[min_], list2[i]   
    return list2

#插入排序版本一
def insetion_sort(list3):
    length = len(list3)
    for i in range(1,length):
        for j in range(i,0,-1):
            if list3[j] < list3[j-1]:
                list3[j],list[j-1]=list3[j-1],list3[j]
    return list3
#插入排序版本二   
def insetion_sort1(list3):
    length = len(list3)
    for i in range(1,length):
        for j in range(0,i):
            if list3[i-j] < list3[i-j-1]:             # 语句不太直观明显
                list3[i-j],list[i-j-1]=list3[i-j-1],list3[i-j]
    return list3
#插入排序版本三    好像有问题
def insertion_sort2(list4):
    length = len(list4)
    for i in range(1,length):
        j = i
        # j 代表每次最上层循环后左侧已经拍好的序列的数量，以便继续讲未排序的序列中取元素从进行后向前比较操作
        while j > 0:
            if list4[j] < list4[j-1]:
                list4[j],list4[j-1] = list4[j-1],list4[j]
                i -= 1
            else:
                break
 
def shell_sort(list):             #不稳定排序
    """希尔排序"""
    #n = 9
    n = len(list)
    #gap=4
    tragds= [n//2,n//4,1]                # 步长策略设置灵活，本次为其中一个，但必须满足最后一个元素（最后一步）为1
    for m in tragds:                    #这一步是步长策略，设置不唯一  可以用 while gap > 0
        gap = m
        for i in range(gap, n):            #不需要对每个分组进行比较交换，而是融入到一起
            j = i
            while j > 0:  # 即使是在分组中也是从末尾往前比较，和插入排序有些不同
                if list[j] < list[j - gap]:
                    list[j], list[j - gap] = list[j - gap], list[j]
                    j -= gap
                else:
                    break
                                                                            #gap //= 2
    return list 
 
 
 
 #快速排序
def quick_sort(list,first,last):
    if first >= last:
        return
    mid_value = list[first]
    low = first
    high = last
    while low < high:
        #让high的游标左移
        while low < high and list[high] >= mid_value:
            high -= 1
        list[low] = list[high]
        #让low的游标右移
        while low < high and list[low] < mid_value:
            low += 1
        list[high] = list[low]
    list[low] = mid_value
    quick_sort(list,first,low-1)
    quick_sort(list,low+1,last)

li = [2,6,2,9,6,8,0,21,2,3,7,6,11,5,90,2,85,4,62]
print(bubble_sort([1,2,1,5,55,2,455,2,6,3,9,12,36,10,12,15,6,81,40,123,6,35,70,36]))
